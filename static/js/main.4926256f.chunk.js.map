{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Grid","props","tileType","value","className","Board","state","grids","Array","fill","score","history","historyScore","firstTile","Math","floor","random","secondTile","resetGridState","this","setState","undoHistory","slice","undoScore","length","currenState","pop","currentScore","i","row","col","grid","nullPos","push","newGridsState","indexCalc","row2","randomIndex","randomNullPostionGen","restart","newHistory","newScoreHistory","col2","onClick","undo","renderGrid","onUp","onLeft","onDown","onRight","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4926256f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board/>\n    </div>\n  );\n}\n\nfunction Grid(props){\n  let tileType=\"grid \"+\"tile\"+props.value;\n  if(props.value == null || props.value<=64){\n    return(\n      <div className={tileType}>\n        {props.value}\n      </div>\n    );\n  }\n  else{\n      return(\n        <div className='grid tilex'>\n          {props.value}\n        </div>);\n  }\n  \n}\n\nclass Board extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      grids:Array(16).fill(null),\n      score: 0,\n      history: Array(),\n      historyScore: Array(),\n    }\n     //Random Tile Genration\n     let firstTile = Math.floor(Math.random()*16);\n     let secondTile= Math.floor(Math.random()*16);\n     while(secondTile == firstTile){\n       secondTile= Math.floor(Math.random()*16);\n     }\n     this.state.grids[firstTile] = 2;\n     this.state.grids[secondTile] = 2;\n  }\n\n  restart(){\n    let resetGridState=Array(16).fill(null);\n    let firstTile = Math.floor(Math.random()*16);\n    let secondTile= Math.floor(Math.random()*16);\n    while(secondTile == firstTile){\n      secondTile= Math.floor(Math.random()*16);\n    }\n    resetGridState[firstTile] = 2;\n    resetGridState[secondTile] = 2;\n\n    this.setState({grids:resetGridState,score:0,history:Array(),historyScore:Array()});\n\n  }\n\n  undo(){\n    let undoHistory = this.state.history.slice();\n    let undoScore = this.state.historyScore.slice();\n\n    if(undoHistory.length > 0){\n      let currenState = undoHistory.pop();\n      let currentScore = undoScore.pop();\n      this.setState({grids:currenState,score:currentScore,history:undoHistory,historyScore:undoScore});\n    }\n  }\n\n  renderGrid(i){\n    return <Grid value={this.state.grids[i]}/>\n  }\n\n  indexCalc(row,col){\n    return row*4+col;\n  }\n\n  randomNullPostionGen(grid){\n    let nullPos = new Array();\n    for(let i=0;i<4;i++){\n      if(grid[i] == null){\n        nullPos.push(i);\n      }\n      if(grid[12+i] == null){\n        nullPos.push(12+i);\n      }\n    }\n    if(grid[4] == null){\n      nullPos.push(4);\n    }\n    if(grid[7] == null){\n      nullPos.push(7);\n    }\n    if(grid[8] == null){\n      nullPos.push(8);\n    }\n    if(grid[11] == null){\n      nullPos.push(11);\n    }\n    if(nullPos.length == 1){\n      return null;\n    }\n    else{\n    return nullPos[Math.floor(Math.random()*nullPos.length)];\n    }\n\n  }\n\n  onUp(){\n    let newGridsState = this.state.grids.slice();\n    let score = this.state.score;\n    \n    for(let col=0;col<4;col++){\n      for(let row=0;row<4;row++){\n        if(newGridsState[this.indexCalc(row,col)] != null){\n          for(let row2=row+1;row2<4;row2++){\n            if(newGridsState[this.indexCalc(row2,col)] != null){\n              if(newGridsState[this.indexCalc(row,col)] == newGridsState[this.indexCalc(row2,col)]){\n                newGridsState[this.indexCalc(row,col)] *= 2;\n                score += newGridsState[this.indexCalc(row,col)];\n                newGridsState[this.indexCalc(row2,col)] = null;\n              }\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    for(let col=0;col<4;col++){\n      for(let row=0;row<4;row++){\n        if(newGridsState[this.indexCalc(row,col)] == null){\n          for(let row2=row+1;row2<4;row2++){\n            if(newGridsState[this.indexCalc(row2,col)] != null){\n              newGridsState[this.indexCalc(row,col)] = newGridsState[this.indexCalc(row2,col)];\n              newGridsState[this.indexCalc(row2,col)] = null;\n              break;\n            }\n          }\n        }\n      }\n    }\n    let randomIndex = this.randomNullPostionGen(newGridsState);\n    if(randomIndex == null){\n      this.restart();\n    }\n    else{\n      newGridsState[randomIndex] = 2;\n    }\n    let newHistory = this.state.history;\n    let newScoreHistory = this.state.historyScore;\n    newHistory.push(this.state.grids.slice());\n    newScoreHistory.push(score);\n    this.setState({grids : newGridsState, score:score,history:newHistory,historyScore:newScoreHistory});\n    \n  }\n\n  onDown(){\n    let newGridsState = this.state.grids.slice();\n    let score = this.state.score;\n\n    for(let col=3;col>=0;col--){\n      for(let row=3;row>=0;row--){\n        if(newGridsState[this.indexCalc(row,col)] != null){\n          for(let row2=row-1;row2>=0;row2--){\n            if(newGridsState[this.indexCalc(row2,col)] != null){\n              if(newGridsState[this.indexCalc(row,col)] == newGridsState[this.indexCalc(row2,col)]){\n                newGridsState[this.indexCalc(row,col)] *= 2;\n                score += newGridsState[this.indexCalc(row,col)];\n                newGridsState[this.indexCalc(row2,col)] = null;\n              }\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    for(let col=3;col>=0;col--){\n      for(let row=3;row>=0;row--){\n        if(newGridsState[this.indexCalc(row,col)] == null){\n          for(let row2=row-1;row2>=0;row2--){\n            if(newGridsState[this.indexCalc(row2,col)] != null){\n              newGridsState[this.indexCalc(row,col)] = newGridsState[this.indexCalc(row2,col)];\n              newGridsState[this.indexCalc(row2,col)] = null;\n              break;\n            }\n          }\n        }\n      }\n    }\n    let randomIndex = this.randomNullPostionGen(newGridsState);\n    if(randomIndex == null){\n      this.restart();\n    }\n    else{\n      newGridsState[randomIndex] = 2;\n    }\n\n    let newHistory = this.state.history;\n    let newScoreHistory = this.state.historyScore;\n    newHistory.push(this.state.grids.slice());\n    newScoreHistory.push(score);\n    this.setState({grids : newGridsState, score:score,history:newHistory,historyScore:newScoreHistory});\n  }\n\n  onLeft(){\n    let newGridsState = this.state.grids.slice();\n    let score = this.state.score;\n\n    for(let row=0;row<4;row++){\n      for(let col=0;col<4;col++){\n        if(newGridsState[this.indexCalc(row,col)] != null){\n          for(let col2=col+1;col2<4;col2++){\n            if(newGridsState[this.indexCalc(row,col2)] != null){\n              if(newGridsState[this.indexCalc(row,col)] == newGridsState[this.indexCalc(row,col2)]){\n                newGridsState[this.indexCalc(row,col)] *= 2;\n                score += newGridsState[this.indexCalc(row,col)];\n                newGridsState[this.indexCalc(row,col2)] = null;\n              }\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    for(let row=0;row<4;row++){\n      for(let col=0;col<4;col++){\n        if(newGridsState[this.indexCalc(row,col)] == null){\n          for(let col2=col+1;col2<4;col2++){\n            if(newGridsState[this.indexCalc(row,col2)] != null){\n              newGridsState[this.indexCalc(row,col)] = newGridsState[this.indexCalc(row,col2)];\n              newGridsState[this.indexCalc(row,col2)] = null;\n              break;\n            }\n          }\n        }\n      }\n    }\n    let randomIndex = this.randomNullPostionGen(newGridsState);\n    if(randomIndex == null){\n      this.restart();\n    }\n    else{\n      newGridsState[randomIndex] = 2;\n    }\n\n    let newHistory = this.state.history;\n    let newScoreHistory = this.state.historyScore;\n    newHistory.push(this.state.grids.slice());\n    newScoreHistory.push(score);\n    this.setState({grids : newGridsState, score:score,history:newHistory,historyScore:newScoreHistory});\n    \n  }\n\n  onRight(){\n    let newGridsState = this.state.grids.slice();\n    let score = this.state.score;\n    \n    for(let row=3;row>=0;row--){\n      for(let col=3;col>=0;col--){\n        if(newGridsState[this.indexCalc(row,col)] != null){\n          for(let col2=col-1;col2>=0;col2--){\n            if(newGridsState[this.indexCalc(row,col2)] != null){\n              if(newGridsState[this.indexCalc(row,col)] == newGridsState[this.indexCalc(row,col2)]){\n                newGridsState[this.indexCalc(row,col)] *= 2;\n                score += newGridsState[this.indexCalc(row,col)];\n                newGridsState[this.indexCalc(row,col2)] = null;\n              }\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    for(let row=3;row>=0;row--){\n      for(let col=3;col>=0;col--){\n        if(newGridsState[this.indexCalc(row,col)] == null){\n          for(let col2=col-1;col2>=0;col2--){\n            if(newGridsState[this.indexCalc(row,col2)] != null){\n              newGridsState[this.indexCalc(row,col)] = newGridsState[this.indexCalc(row,col2)];\n              newGridsState[this.indexCalc(row,col2)] = null;\n              break;\n            }\n          }\n        }\n      }\n    }\n    let randomIndex = this.randomNullPostionGen(newGridsState);\n    if(randomIndex == null){\n      this.restart();\n    }\n    else{\n      newGridsState[randomIndex] = 2;\n    }\n\n    let newHistory = this.state.history;\n    let newScoreHistory = this.state.historyScore;\n    newHistory.push(this.state.grids.slice());\n    newScoreHistory.push(score);\n    this.setState({grids : newGridsState, score:score,history:newHistory,historyScore:newScoreHistory});\n    \n  }\n\n\n  render(){\n    return(\n      <div className=\"game\">\n        <div className=\"title-score\">\n          <div className=\"title\">2048</div>\n          <div className=\"score\">Score:{this.state.score}</div>\n          <button className=\"reset-button\" onClick={()=>this.restart()}>Restart</button>\n          <button className=\"undo-button\" onClick={()=>this.undo()}>⟲</button>\n        </div>\n        <div className=\"board\">\n          <div className=\"row\">\n            {this.renderGrid(0)}\n            {this.renderGrid(1)}\n            {this.renderGrid(2)}\n            {this.renderGrid(3)}\n          </div>\n          <div className=\"row\">\n            {this.renderGrid(4)}\n            {this.renderGrid(5)}\n            {this.renderGrid(6)}\n            {this.renderGrid(7)}\n            </div>    \n          <div className=\"row\">\n            {this.renderGrid(8)}\n            {this.renderGrid(9)}\n            {this.renderGrid(10)}\n            {this.renderGrid(11)}\n            </div>    \n          <div className=\"row\">\n            {this.renderGrid(12)}\n            {this.renderGrid(13)}\n            {this.renderGrid(14)}\n            {this.renderGrid(15)}\n            </div>          \n        </div>\n        <div className=\"controls\">\n          <div className=\"row\">\n            <button className=\"up btn\" onClick={()=>this.onUp()}>↑</button>\n          </div>\n          <div className=\"row\">\n            <button className=\"left btn\" onClick={()=>this.onLeft()}>←</button>\n            <button className=\"down btn\" onClick={()=>this.onDown()}>↓</button>\n            <button className=\"right btn\" onClick={()=>this.onRight()}>→</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}